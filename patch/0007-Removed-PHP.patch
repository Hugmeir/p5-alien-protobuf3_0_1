From 3a1f2d48fdc386cd26e775ac28d6167861e6d4da Mon Sep 17 00:00:00 2001
From: Brian Fraser <brian.fraser@booking.com>
Date: Sat, 21 Nov 2020 19:06:25 +0100
Subject: [PATCH 7/8] Removed PHP

---
 BUILD                                         |   1 -
 Makefile.am                                   |  53 +-
 Makefile.in                                   |  52 +-
 cmake/extract_includes.bat.in                 |   2 -
 cmake/libprotoc.cmake                         |   1 -
 configure                                     |   2 +-
 configure.ac                                  |   2 +-
 src/Makefile.am                               |   2 -
 src/Makefile.in                               |  23 +-
 .../protobuf/compiler/php/php_generator.cc    | 781 ------------------
 .../protobuf/compiler/php/php_generator.h     |  57 --
 11 files changed, 6 insertions(+), 970 deletions(-)
 delete mode 100644 src/google/protobuf/compiler/php/php_generator.cc
 delete mode 100644 src/google/protobuf/compiler/php/php_generator.h

diff --git a/BUILD b/BUILD
index 5116d7a..2644914 100644
--- a/BUILD
+++ b/BUILD
@@ -238,7 +238,6 @@ cc_library(
         "src/google/protobuf/compiler/cpp/cpp_service.cc",
         "src/google/protobuf/compiler/cpp/cpp_string_field.cc",
         "src/google/protobuf/compiler/js/js_generator.cc",
-        "src/google/protobuf/compiler/php/php_generator.cc",
         "src/google/protobuf/compiler/plugin.cc",
         "src/google/protobuf/compiler/plugin.pb.cc",
         "src/google/protobuf/compiler/ruby/ruby_generator.cc",
diff --git a/Makefile.am b/Makefile.am
index f7ae455..1099b64 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -44,57 +44,6 @@ clean-local:
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = protobuf.pc protobuf-lite.pc
 
-php_EXTRA_DIST=                                              \
-  php/src/phpdoc.dist.xml                                    \
-  php/src/Google/Protobuf/Internal/DescriptorPool.php        \
-  php/src/Google/Protobuf/Internal/OneofField.php            \
-  php/src/Google/Protobuf/Internal/MapEntry.php              \
-  php/src/Google/Protobuf/Internal/Type.php                  \
-  php/src/Google/Protobuf/Internal/InputStream.php           \
-  php/src/Google/Protobuf/Internal/OutputStream.php          \
-  php/src/Google/Protobuf/Internal/MessageBuilderContext.php \
-  php/src/Google/Protobuf/Internal/MapField.php              \
-  php/src/Google/Protobuf/Internal/RepeatedField.php         \
-  php/src/Google/Protobuf/Internal/Message.php               \
-  php/src/Google/Protobuf/Internal/GPBWire.php               \
-  php/src/Google/Protobuf/Internal/GPBType.php               \
-  php/src/Google/Protobuf/Internal/GPBLabel.php              \
-  php/src/Google/Protobuf/Internal/EnumBuilderContext.php    \
-  php/src/Google/Protobuf/Internal/GPBUtil.php               \
-  php/src/Google/Protobuf/descriptor_internal.pb.php         \
-  php/src/Google/Protobuf/descriptor.php                     \
-  php/tests/encode_decode_test.php                           \
-  php/tests/test.sh                                          \
-  php/tests/generated_class_test.php                         \
-  php/tests/array_test.php                                   \
-  php/tests/php_implementation_test.php                      \
-  php/tests/test_include.proto                               \
-  php/tests/test_include.pb.php                              \
-  php/tests/map_field_test.php                               \
-  php/tests/test_base.php                                    \
-  php/tests/test_util.php                                    \
-  php/tests/test.proto                                       \
-  php/tests/test.pb.php                                      \
-  php/tests/memory_leak_test.php                             \
-  php/README.md                                              \
-  php/ext/google/protobuf/utf8.h                             \
-  php/ext/google/protobuf/message.c                          \
-  php/ext/google/protobuf/utf8.c                             \
-  php/ext/google/protobuf/package.xml                        \
-  php/ext/google/protobuf/upb.h                              \
-  php/ext/google/protobuf/array.c                            \
-  php/ext/google/protobuf/encode_decode.c                    \
-  php/ext/google/protobuf/protobuf.h                         \
-  php/ext/google/protobuf/type_check.c                       \
-  php/ext/google/protobuf/def.c                              \
-  php/ext/google/protobuf/storage.c                          \
-  php/ext/google/protobuf/map.c                              \
-  php/ext/google/protobuf/config.m4                          \
-  php/ext/google/protobuf/upb.c                              \
-  php/ext/google/protobuf/protobuf.c                         \
-  phpunit.xml                                                \
-  composer.json
-
 ruby_EXTRA_DIST=                                                             \
   ruby/Gemfile                                                               \
   ruby/Gemfile.lock                                                          \
@@ -173,7 +122,7 @@ js_EXTRA_DIST=                              \
   js/testbinary.proto                       \
   js/testempty.proto
 
-all_EXTRA_DIST=$(php_EXTRA_DIST) $(ruby_EXTRA_DIST) $(js_EXTRA_DIST)
+all_EXTRA_DIST=$(ruby_EXTRA_DIST) $(js_EXTRA_DIST)
 
 EXTRA_DIST = $(@DIST_LANG@_EXTRA_DIST)   \
   autogen.sh                             \
diff --git a/Makefile.in b/Makefile.in
index ac5d36b..e5a17ff 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -371,56 +371,6 @@ SUBDIRS = . src
 DIST_SUBDIRS = $(subdirs) src conformance benchmarks
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = protobuf.pc protobuf-lite.pc
-php_EXTRA_DIST = \
-  php/src/phpdoc.dist.xml                                    \
-  php/src/Google/Protobuf/Internal/DescriptorPool.php        \
-  php/src/Google/Protobuf/Internal/OneofField.php            \
-  php/src/Google/Protobuf/Internal/MapEntry.php              \
-  php/src/Google/Protobuf/Internal/Type.php                  \
-  php/src/Google/Protobuf/Internal/InputStream.php           \
-  php/src/Google/Protobuf/Internal/OutputStream.php          \
-  php/src/Google/Protobuf/Internal/MessageBuilderContext.php \
-  php/src/Google/Protobuf/Internal/MapField.php              \
-  php/src/Google/Protobuf/Internal/RepeatedField.php         \
-  php/src/Google/Protobuf/Internal/Message.php               \
-  php/src/Google/Protobuf/Internal/GPBWire.php               \
-  php/src/Google/Protobuf/Internal/GPBType.php               \
-  php/src/Google/Protobuf/Internal/GPBLabel.php              \
-  php/src/Google/Protobuf/Internal/EnumBuilderContext.php    \
-  php/src/Google/Protobuf/Internal/GPBUtil.php               \
-  php/src/Google/Protobuf/descriptor_internal.pb.php         \
-  php/src/Google/Protobuf/descriptor.php                     \
-  php/tests/encode_decode_test.php                           \
-  php/tests/test.sh                                          \
-  php/tests/generated_class_test.php                         \
-  php/tests/array_test.php                                   \
-  php/tests/php_implementation_test.php                      \
-  php/tests/test_include.proto                               \
-  php/tests/test_include.pb.php                              \
-  php/tests/map_field_test.php                               \
-  php/tests/test_base.php                                    \
-  php/tests/test_util.php                                    \
-  php/tests/test.proto                                       \
-  php/tests/test.pb.php                                      \
-  php/tests/memory_leak_test.php                             \
-  php/README.md                                              \
-  php/ext/google/protobuf/utf8.h                             \
-  php/ext/google/protobuf/message.c                          \
-  php/ext/google/protobuf/utf8.c                             \
-  php/ext/google/protobuf/package.xml                        \
-  php/ext/google/protobuf/upb.h                              \
-  php/ext/google/protobuf/array.c                            \
-  php/ext/google/protobuf/encode_decode.c                    \
-  php/ext/google/protobuf/protobuf.h                         \
-  php/ext/google/protobuf/type_check.c                       \
-  php/ext/google/protobuf/def.c                              \
-  php/ext/google/protobuf/storage.c                          \
-  php/ext/google/protobuf/map.c                              \
-  php/ext/google/protobuf/config.m4                          \
-  php/ext/google/protobuf/upb.c                              \
-  php/ext/google/protobuf/protobuf.c                         \
-  phpunit.xml                                                \
-  composer.json
 
 ruby_EXTRA_DIST = \
   ruby/Gemfile                                                               \
@@ -500,7 +450,7 @@ js_EXTRA_DIST = \
   js/testbinary.proto                       \
   js/testempty.proto
 
-all_EXTRA_DIST = $(php_EXTRA_DIST) $(ruby_EXTRA_DIST) $(js_EXTRA_DIST)
+all_EXTRA_DIST = $(ruby_EXTRA_DIST) $(js_EXTRA_DIST)
 EXTRA_DIST = $(@DIST_LANG@_EXTRA_DIST)   \
   autogen.sh                             \
   generate_descriptor_proto.sh           \
diff --git a/cmake/extract_includes.bat.in b/cmake/extract_includes.bat.in
index a7b4577..6a4fbac 100644
--- a/cmake/extract_includes.bat.in
+++ b/cmake/extract_includes.bat.in
@@ -4,7 +4,6 @@ mkdir include\google\protobuf
 mkdir include\google\protobuf\compiler
 mkdir include\google\protobuf\compiler\cpp
 mkdir include\google\protobuf\compiler\js
-mkdir include\google\protobuf\compiler\php
 mkdir include\google\protobuf\compiler\ruby
 mkdir include\google\protobuf\io
 mkdir include\google\protobuf\stubs
@@ -20,7 +19,6 @@ copy ${PROTOBUF_SOURCE_WIN32_PATH}\..\src\google\protobuf\compiler\cpp\cpp_gener
 copy ${PROTOBUF_SOURCE_WIN32_PATH}\..\src\google\protobuf\compiler\importer.h include\google\protobuf\compiler\importer.h
 copy ${PROTOBUF_SOURCE_WIN32_PATH}\..\src\google\protobuf\compiler\js\js_generator.h include\google\protobuf\compiler\js\js_generator.h
 copy ${PROTOBUF_SOURCE_WIN32_PATH}\..\src\google\protobuf\compiler\parser.h include\google\protobuf\compiler\parser.h
-copy ${PROTOBUF_SOURCE_WIN32_PATH}\..\src\google\protobuf\compiler\php\php_generator.h include\google\protobuf\compiler\php\php_generator.h
 copy ${PROTOBUF_SOURCE_WIN32_PATH}\..\src\google\protobuf\compiler\plugin.h include\google\protobuf\compiler\plugin.h
 copy ${PROTOBUF_SOURCE_WIN32_PATH}\..\src\google\protobuf\compiler\plugin.pb.h include\google\protobuf\compiler\plugin.pb.h
 copy ${PROTOBUF_SOURCE_WIN32_PATH}\..\src\google\protobuf\compiler\ruby\ruby_generator.h include\google\protobuf\compiler\ruby\ruby_generator.h
diff --git a/cmake/libprotoc.cmake b/cmake/libprotoc.cmake
index 7b94940..3e65b6e 100644
--- a/cmake/libprotoc.cmake
+++ b/cmake/libprotoc.cmake
@@ -15,7 +15,6 @@ set(libprotoc_files
   ${protobuf_source_dir}/src/google/protobuf/compiler/cpp/cpp_service.cc
   ${protobuf_source_dir}/src/google/protobuf/compiler/cpp/cpp_string_field.cc
   ${protobuf_source_dir}/src/google/protobuf/compiler/js/js_generator.cc
-  ${protobuf_source_dir}/src/google/protobuf/compiler/php/php_generator.cc
   ${protobuf_source_dir}/src/google/protobuf/compiler/plugin.cc
   ${protobuf_source_dir}/src/google/protobuf/compiler/plugin.pb.cc
   ${protobuf_source_dir}/src/google/protobuf/compiler/ruby/ruby_generator.cc
diff --git a/configure b/configure
index 7c98c7f..1b52b9b 100755
--- a/configure
+++ b/configure
@@ -2570,7 +2570,7 @@ ac_config_headers="$ac_config_headers config.h"
 
 case "$DIST_LANG" in
   "") DIST_LANG=all ;;
-  all | cpp | ruby | js | php) ;;
+  all | cpp | ruby | js ) ;;
   *) { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
 $as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
 as_fn_error $? "unknown language: $DIST_LANG
diff --git a/configure.ac b/configure.ac
index 2b2c12a..6e14ca9 100644
--- a/configure.ac
+++ b/configure.ac
@@ -29,7 +29,7 @@ AC_CONFIG_MACRO_DIR([m4])
 AC_ARG_VAR(DIST_LANG, [language to include in the distribution package (i.e., make dist)])
 case "$DIST_LANG" in
   "") DIST_LANG=all ;;
-  all | cpp | csharp | ruby | js | php) ;;
+  all | cpp | csharp | ruby | js ) ;;
   *) AC_MSG_FAILURE([unknown language: $DIST_LANG]) ;;
 esac
 AC_SUBST(DIST_LANG)
diff --git a/src/Makefile.am b/src/Makefile.am
index 2531b2a..3ed6809 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -156,7 +156,6 @@ nobase_include_HEADERS =                                        \
   google/protobuf/compiler/plugin.pb.h                          \
   google/protobuf/compiler/cpp/cpp_generator.h                  \
   google/protobuf/compiler/js/js_generator.h                    \
-  google/protobuf/compiler/php/php_generator.h                  \
   google/protobuf/compiler/ruby/ruby_generator.h                \
   google/protobuf/util/type_resolver.h                          \
   google/protobuf/util/field_comparator.h                       \
@@ -331,7 +330,6 @@ libprotoc_la_SOURCES =                                         \
   google/protobuf/compiler/cpp/cpp_string_field.cc             \
   google/protobuf/compiler/cpp/cpp_string_field.h              \
   google/protobuf/compiler/js/js_generator.cc                  \
-  google/protobuf/compiler/php/php_generator.cc                \
   google/protobuf/compiler/ruby/ruby_generator.cc
 
 bin_PROGRAMS = protoc
diff --git a/src/Makefile.in b/src/Makefile.in
index 076f6fe..ca9b3c9 100644
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -267,7 +267,6 @@ am_libprotoc_la_OBJECTS = google/protobuf/compiler/code_generator.lo \
 	google/protobuf/compiler/cpp/cpp_service.lo \
 	google/protobuf/compiler/cpp/cpp_string_field.lo \
 	google/protobuf/compiler/js/js_generator.lo \
-	google/protobuf/compiler/php/php_generator.lo \
 	google/protobuf/compiler/ruby/ruby_generator.lo
 libprotoc_la_OBJECTS = $(am_libprotoc_la_OBJECTS)
 libprotoc_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
@@ -739,7 +738,6 @@ am__nobase_include_HEADERS_DIST =  \
 	google/protobuf/compiler/plugin.pb.h \
 	google/protobuf/compiler/cpp/cpp_generator.h \
 	google/protobuf/compiler/js/js_generator.h \
-	google/protobuf/compiler/php/php_generator.h \
 	google/protobuf/compiler/ruby/ruby_generator.h \
 	google/protobuf/util/type_resolver.h \
 	google/protobuf/util/field_comparator.h \
@@ -1221,7 +1219,6 @@ nobase_include_HEADERS = \
   google/protobuf/compiler/plugin.pb.h                          \
   google/protobuf/compiler/cpp/cpp_generator.h                  \
   google/protobuf/compiler/js/js_generator.h                    \
-  google/protobuf/compiler/php/php_generator.h                  \
   google/protobuf/compiler/ruby/ruby_generator.h                \
   google/protobuf/util/type_resolver.h                          \
   google/protobuf/util/field_comparator.h                       \
@@ -1394,7 +1391,6 @@ libprotoc_la_SOURCES = \
   google/protobuf/compiler/cpp/cpp_string_field.cc             \
   google/protobuf/compiler/cpp/cpp_string_field.h              \
   google/protobuf/compiler/js/js_generator.cc                  \
-  google/protobuf/compiler/php/php_generator.cc                \
   google/protobuf/compiler/ruby/ruby_generator.cc
 
 protoc_LDADD = $(PTHREAD_LIBS) libprotobuf.la libprotoc.la
@@ -2127,15 +2123,6 @@ google/protobuf/compiler/js/$(DEPDIR)/$(am__dirstamp):
 google/protobuf/compiler/js/js_generator.lo:  \
 	google/protobuf/compiler/js/$(am__dirstamp) \
 	google/protobuf/compiler/js/$(DEPDIR)/$(am__dirstamp)
-google/protobuf/compiler/php/$(am__dirstamp):
-	@$(MKDIR_P) google/protobuf/compiler/php
-	@: > google/protobuf/compiler/php/$(am__dirstamp)
-google/protobuf/compiler/php/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) google/protobuf/compiler/php/$(DEPDIR)
-	@: > google/protobuf/compiler/php/$(DEPDIR)/$(am__dirstamp)
-google/protobuf/compiler/php/php_generator.lo:  \
-	google/protobuf/compiler/php/$(am__dirstamp) \
-	google/protobuf/compiler/php/$(DEPDIR)/$(am__dirstamp)
 google/protobuf/compiler/ruby/$(am__dirstamp):
 	@$(MKDIR_P) google/protobuf/compiler/ruby
 	@: > google/protobuf/compiler/ruby/$(am__dirstamp)
@@ -2970,8 +2957,6 @@ mostlyclean-compile:
 	-rm -f google/protobuf/compiler/cpp/*.lo
 	-rm -f google/protobuf/compiler/js/*.$(OBJEXT)
 	-rm -f google/protobuf/compiler/js/*.lo
-	-rm -f google/protobuf/compiler/php/*.$(OBJEXT)
-	-rm -f google/protobuf/compiler/php/*.lo
 	-rm -f google/protobuf/compiler/ruby/*.$(OBJEXT)
 	-rm -f google/protobuf/compiler/ruby/*.lo
 	-rm -f google/protobuf/io/*.$(OBJEXT)
@@ -3201,7 +3186,6 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@google/protobuf/compiler/cpp/$(DEPDIR)/protobuf_test-cpp_unittest.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@google/protobuf/compiler/cpp/$(DEPDIR)/protobuf_test-metadata_test.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@google/protobuf/compiler/js/$(DEPDIR)/js_generator.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@google/protobuf/compiler/php/$(DEPDIR)/php_generator.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@google/protobuf/compiler/ruby/$(DEPDIR)/protobuf_test-ruby_generator_unittest.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@google/protobuf/compiler/ruby/$(DEPDIR)/ruby_generator.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@google/protobuf/io/$(DEPDIR)/coded_stream.Plo@am__quote@
@@ -6618,7 +6602,6 @@ clean-libtool:
 	-rm -rf google/protobuf/compiler/.libs google/protobuf/compiler/_libs
 	-rm -rf google/protobuf/compiler/cpp/.libs google/protobuf/compiler/cpp/_libs
 	-rm -rf google/protobuf/compiler/js/.libs google/protobuf/compiler/js/_libs
-	-rm -rf google/protobuf/compiler/php/.libs google/protobuf/compiler/php/_libs
 	-rm -rf google/protobuf/compiler/ruby/.libs google/protobuf/compiler/ruby/_libs
 	-rm -rf google/protobuf/io/.libs google/protobuf/io/_libs
 	-rm -rf google/protobuf/stubs/.libs google/protobuf/stubs/_libs
@@ -7011,8 +6994,6 @@ distclean-generic:
 	-rm -f google/protobuf/compiler/cpp/$(am__dirstamp)
 	-rm -f google/protobuf/compiler/js/$(DEPDIR)/$(am__dirstamp)
 	-rm -f google/protobuf/compiler/js/$(am__dirstamp)
-	-rm -f google/protobuf/compiler/php/$(DEPDIR)/$(am__dirstamp)
-	-rm -f google/protobuf/compiler/php/$(am__dirstamp)
 	-rm -f google/protobuf/compiler/ruby/$(DEPDIR)/$(am__dirstamp)
 	-rm -f google/protobuf/compiler/ruby/$(am__dirstamp)
 	-rm -f google/protobuf/io/$(DEPDIR)/$(am__dirstamp)
@@ -7039,7 +7020,7 @@ clean-am: clean-binPROGRAMS clean-checkPROGRAMS clean-generic \
 	clean-libLTLIBRARIES clean-libtool clean-local mostlyclean-am
 
 distclean: distclean-am
-	-rm -rf ./$(DEPDIR) google/protobuf/$(DEPDIR) google/protobuf/compiler/$(DEPDIR) google/protobuf/compiler/cpp/$(DEPDIR) google/protobuf/compiler/js/$(DEPDIR) google/protobuf/compiler/php/$(DEPDIR) google/protobuf/compiler/ruby/$(DEPDIR) google/protobuf/io/$(DEPDIR) google/protobuf/stubs/$(DEPDIR) google/protobuf/testing/$(DEPDIR) google/protobuf/util/$(DEPDIR) google/protobuf/util/internal/$(DEPDIR) google/protobuf/util/internal/testdata/$(DEPDIR)
+	-rm -rf ./$(DEPDIR) google/protobuf/$(DEPDIR) google/protobuf/compiler/$(DEPDIR) google/protobuf/compiler/cpp/$(DEPDIR) google/protobuf/compiler/js/$(DEPDIR) google/protobuf/compiler/ruby/$(DEPDIR) google/protobuf/io/$(DEPDIR) google/protobuf/stubs/$(DEPDIR) google/protobuf/testing/$(DEPDIR) google/protobuf/util/$(DEPDIR) google/protobuf/util/internal/$(DEPDIR) google/protobuf/util/internal/testdata/$(DEPDIR)
 	-rm -f Makefile
 distclean-am: clean-am distclean-compile distclean-generic \
 	distclean-tags
@@ -7086,7 +7067,7 @@ install-ps-am:
 installcheck-am:
 
 maintainer-clean: maintainer-clean-am
-	-rm -rf ./$(DEPDIR) google/protobuf/$(DEPDIR) google/protobuf/compiler/$(DEPDIR) google/protobuf/compiler/cpp/$(DEPDIR) google/protobuf/compiler/js/$(DEPDIR) google/protobuf/compiler/php/$(DEPDIR) google/protobuf/compiler/ruby/$(DEPDIR) google/protobuf/io/$(DEPDIR) google/protobuf/stubs/$(DEPDIR) google/protobuf/testing/$(DEPDIR) google/protobuf/util/$(DEPDIR) google/protobuf/util/internal/$(DEPDIR) google/protobuf/util/internal/testdata/$(DEPDIR)
+	-rm -rf ./$(DEPDIR) google/protobuf/$(DEPDIR) google/protobuf/compiler/$(DEPDIR) google/protobuf/compiler/cpp/$(DEPDIR) google/protobuf/compiler/js/$(DEPDIR) google/protobuf/compiler/ruby/$(DEPDIR) google/protobuf/io/$(DEPDIR) google/protobuf/stubs/$(DEPDIR) google/protobuf/testing/$(DEPDIR) google/protobuf/util/$(DEPDIR) google/protobuf/util/internal/$(DEPDIR) google/protobuf/util/internal/testdata/$(DEPDIR)
 	-rm -f Makefile
 maintainer-clean-am: distclean-am maintainer-clean-generic
 
diff --git a/src/google/protobuf/compiler/php/php_generator.cc b/src/google/protobuf/compiler/php/php_generator.cc
deleted file mode 100644
index 75ddb40..0000000
--- a/src/google/protobuf/compiler/php/php_generator.cc
+++ /dev/null
@@ -1,781 +0,0 @@
-// Protocol Buffers - Google's data interchange format
-// Copyright 2008 Google Inc.  All rights reserved.
-// https://developers.google.com/protocol-buffers/
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are
-// met:
-//
-//     * Redistributions of source code must retain the above copyright
-// notice, this list of conditions and the following disclaimer.
-//     * Redistributions in binary form must reproduce the above
-// copyright notice, this list of conditions and the following disclaimer
-// in the documentation and/or other materials provided with the
-// distribution.
-//     * Neither the name of Google Inc. nor the names of its
-// contributors may be used to endorse or promote products derived from
-// this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-#include <google/protobuf/compiler/php/php_generator.h>
-
-#include <google/protobuf/compiler/code_generator.h>
-#include <google/protobuf/compiler/plugin.h>
-#include <google/protobuf/descriptor.h>
-#include <google/protobuf/descriptor.pb.h>
-#include <google/protobuf/io/printer.h>
-#include <google/protobuf/io/zero_copy_stream.h>
-#include <google/protobuf/stubs/strutil.h>
-
-#include <sstream>
-
-using google::protobuf::internal::scoped_ptr;
-
-const std::string kDescriptorFile = "google/protobuf/descriptor.proto";
-const std::string kDescriptorPackageName = "Google\\Protobuf\\Internal";
-
-namespace google {
-namespace protobuf {
-namespace compiler {
-namespace php {
-
-// Forward decls.
-std::string PhpName(const std::string& full_name, bool is_descriptor);
-std::string DefaultForField(google::protobuf::FieldDescriptor* field);
-std::string IntToString(int32 value);
-std::string GeneratedFileName(const std::string& proto_file,
-                              bool is_descriptor);
-std::string LabelForField(google::protobuf::FieldDescriptor* field);
-std::string TypeName(google::protobuf::FieldDescriptor* field);
-std::string UnderscoresToCamelCase(const string& name, bool cap_first_letter);
-std::string EscapeDollor(const string& to_escape);
-std::string BinaryToHex(const string& binary);
-void GenerateMessage(const string& name_prefix,
-                     const google::protobuf::Descriptor* message,
-                     bool is_descriptor,
-                     google::protobuf::io::Printer* printer);
-void GenerateEnum(const google::protobuf::EnumDescriptor* en,
-                  google::protobuf::io::Printer* printer);
-void Indent(google::protobuf::io::Printer* printer);
-void Outdent(google::protobuf::io::Printer* printer);
-
-std::string MessageName(const google::protobuf::Descriptor* message,
-                        bool is_descriptor) {
-  string message_name = message->name();
-  const google::protobuf::Descriptor* descriptor = message->containing_type();
-  while (descriptor != NULL) {
-    message_name = descriptor->name() + '_' + message_name;
-    descriptor = descriptor->containing_type();
-  }
-  return PhpName(message->file()->package(), is_descriptor) + '\\' +
-         message_name;
-}
-
-std::string MessageFullName(const google::protobuf::Descriptor* message,
-                            bool is_descriptor) {
-  if (is_descriptor) {
-    return StringReplace(message->full_name(),
-                         "google.protobuf",
-                         "google.protobuf.internal", false);
-  } else {
-    return message->full_name();
-  }
-}
-
-std::string EnumFullName(const google::protobuf::EnumDescriptor* envm,
-                         bool is_descriptor) {
-  if (is_descriptor) {
-    return StringReplace(envm->full_name(),
-                         "google.protobuf",
-                         "google.protobuf.internal", false);
-  } else {
-    return envm->full_name();
-  }
-}
-
-std::string EnumClassName(const google::protobuf::EnumDescriptor* envm) {
-  string enum_class_name = envm->name();
-  const google::protobuf::Descriptor* descriptor = envm->containing_type();
-  while (descriptor != NULL) {
-    enum_class_name = descriptor->name() + '_' + enum_class_name;
-    descriptor = descriptor->containing_type();
-  }
-  return enum_class_name;
-}
-
-std::string EnumName(const google::protobuf::EnumDescriptor* envm,
-                     bool is_descriptor) {
-  string enum_name = EnumClassName(envm);
-  return PhpName(envm->file()->package(), is_descriptor) + '\\' + enum_name;
-}
-
-std::string PhpName(const std::string& full_name, bool is_descriptor) {
-  if (is_descriptor) {
-    return kDescriptorPackageName;
-  }
-
-  std::string result;
-  bool cap_next_letter = true;
-  for (int i = 0; i < full_name.size(); i++) {
-    if ('a' <= full_name[i] && full_name[i] <= 'z' && cap_next_letter) {
-      result += full_name[i] + ('A' - 'a');
-      cap_next_letter = false;
-    } else if (full_name[i] == '.') {
-      result += '\\';
-      cap_next_letter = true;
-    } else {
-      result += full_name[i];
-      cap_next_letter = false;
-    }
-  }
-  return result;
-}
-
-std::string DefaultForField(const google::protobuf::FieldDescriptor* field) {
-  switch (field->type()) {
-    case FieldDescriptor::TYPE_INT32:
-    case FieldDescriptor::TYPE_INT64:
-    case FieldDescriptor::TYPE_UINT32:
-    case FieldDescriptor::TYPE_UINT64:
-    case FieldDescriptor::TYPE_SINT32:
-    case FieldDescriptor::TYPE_SINT64:
-    case FieldDescriptor::TYPE_FIXED32:
-    case FieldDescriptor::TYPE_FIXED64:
-    case FieldDescriptor::TYPE_SFIXED32:
-    case FieldDescriptor::TYPE_SFIXED64:
-    case FieldDescriptor::TYPE_ENUM: return "0";
-    case FieldDescriptor::TYPE_DOUBLE:
-    case FieldDescriptor::TYPE_FLOAT: return "0.0";
-    case FieldDescriptor::TYPE_BOOL: return "false";
-    case FieldDescriptor::TYPE_STRING:
-    case FieldDescriptor::TYPE_BYTES: return "''";
-    case FieldDescriptor::TYPE_MESSAGE:
-    case FieldDescriptor::TYPE_GROUP: return "null";
-    default: assert(false); return "";
-  }
-}
-
-std::string GeneratedFileName(const std::string& proto_file,
-                              bool is_descriptor) {
-  if (is_descriptor) {
-    return "descriptor_internal.pb.php";
-  } else {
-    int lastindex = proto_file.find_last_of(".");
-    return proto_file.substr(0, lastindex) + ".pb.php";
-  }
-}
-
-std::string IntToString(int32 value) {
-  std::ostringstream os;
-  os << value;
-  return os.str();
-}
-
-std::string LabelForField(const google::protobuf::FieldDescriptor* field) {
-  switch (field->label()) {
-    case FieldDescriptor::LABEL_OPTIONAL: return "optional";
-    case FieldDescriptor::LABEL_REQUIRED: return "required";
-    case FieldDescriptor::LABEL_REPEATED: return "repeated";
-    default: assert(false); return "";
-  }
-}
-
-std::string TypeName(const google::protobuf::FieldDescriptor* field) {
-  switch (field->type()) {
-    case FieldDescriptor::TYPE_INT32: return "int32";
-    case FieldDescriptor::TYPE_INT64: return "int64";
-    case FieldDescriptor::TYPE_UINT32: return "uint32";
-    case FieldDescriptor::TYPE_UINT64: return "uint64";
-    case FieldDescriptor::TYPE_SINT32: return "sint32";
-    case FieldDescriptor::TYPE_SINT64: return "sint64";
-    case FieldDescriptor::TYPE_FIXED32: return "fixed32";
-    case FieldDescriptor::TYPE_FIXED64: return "fixed64";
-    case FieldDescriptor::TYPE_SFIXED32: return "sfixed32";
-    case FieldDescriptor::TYPE_SFIXED64: return "sfixed64";
-    case FieldDescriptor::TYPE_DOUBLE: return "double";
-    case FieldDescriptor::TYPE_FLOAT: return "float";
-    case FieldDescriptor::TYPE_BOOL: return "bool";
-    case FieldDescriptor::TYPE_ENUM: return "enum";
-    case FieldDescriptor::TYPE_STRING: return "string";
-    case FieldDescriptor::TYPE_BYTES: return "bytes";
-    case FieldDescriptor::TYPE_MESSAGE: return "message";
-    case FieldDescriptor::TYPE_GROUP: return "group";
-    default: assert(false); return "";
-  }
-}
-
-std::string EnumOrMessageSuffix(
-    const google::protobuf::FieldDescriptor* field, bool is_descriptor) {
-  if (field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE) {
-    return ", '" + MessageFullName(field->message_type(), is_descriptor) + "'";
-  }
-  if (field->cpp_type() == FieldDescriptor::CPPTYPE_ENUM) {
-    return ", '" + EnumFullName(field->enum_type(), is_descriptor) + "'";
-  }
-  return "";
-}
-
-// Converts a name to camel-case. If cap_first_letter is true, capitalize the
-// first letter.
-std::string UnderscoresToCamelCase(const string& input, bool cap_first_letter) {
-  std::string result;
-  for (int i = 0; i < input.size(); i++) {
-    if ('a' <= input[i] && input[i] <= 'z') {
-      if (cap_first_letter) {
-        result += input[i] + ('A' - 'a');
-      } else {
-        result += input[i];
-      }
-      cap_first_letter = false;
-    } else if ('A' <= input[i] && input[i] <= 'Z') {
-      if (i == 0 && !cap_first_letter) {
-        // Force first letter to lower-case unless explicitly told to
-        // capitalize it.
-        result += input[i] + ('a' - 'A');
-      } else {
-        // Capital letters after the first are left as-is.
-        result += input[i];
-      }
-      cap_first_letter = false;
-    } else if ('0' <= input[i] && input[i] <= '9') {
-      result += input[i];
-      cap_first_letter = true;
-    } else {
-      cap_first_letter = true;
-    }
-  }
-  // Add a trailing "_" if the name should be altered.
-  if (input[input.size() - 1] == '#') {
-    result += '_';
-  }
-  return result;
-}
-
-std::string EscapeDollor(const string& to_escape) {
-  return StringReplace(to_escape, "$", "\\$", true);
-}
-
-std::string BinaryToHex(const string& src) {
-  string dest;
-  size_t i;
-  unsigned char symbol[16] = {
-    '0', '1', '2', '3',
-    '4', '5', '6', '7',
-    '8', '9', 'a', 'b',
-    'c', 'd', 'e', 'f',
-  };
-
-  dest.resize(src.size() * 2);
-  char* append_ptr = &dest[0];
-
-  for (i = 0; i < src.size(); i++) {
-    *append_ptr++ = symbol[(src[i] & 0xf0) >> 4];
-    *append_ptr++ = symbol[src[i] & 0x0f];
-  }
-
-  return dest;
-}
-
-void Indent(google::protobuf::io::Printer* printer) {
-  printer->Indent();
-  printer->Indent();
-}
-void Outdent(google::protobuf::io::Printer* printer) {
-  printer->Outdent();
-  printer->Outdent();
-}
-
-void GenerateField(const google::protobuf::FieldDescriptor* field,
-                   google::protobuf::io::Printer* printer, bool is_descriptor) {
-  if (field->is_repeated()) {
-    printer->Print(
-        "private $@name@;\n",
-        "name", field->name());
-  } else if (field->containing_oneof()) {
-    // Oneof fields are handled by GenerateOneofField.
-    return;
-  } else {
-    printer->Print(
-        "private $@name@ = @default@;\n",
-        "name", field->name(),
-        "default", DefaultForField(field));
-  }
-
-  if (is_descriptor) {
-    printer->Print(
-        "private $has_@name@ = false;\n",
-        "name", field->name());
-  }
-}
-
-void GenerateOneofField(const google::protobuf::OneofDescriptor* oneof,
-                        google::protobuf::io::Printer* printer) {
-  // Oneof property needs to be protected in order to be accessed by parent
-  // class in implementation.
-  printer->Print(
-      "protected $@name@;\n",
-      "name", oneof->name());
-}
-
-void GenerateFieldAccessor(const google::protobuf::FieldDescriptor* field,
-                           bool is_descriptor,
-                           google::protobuf::io::Printer* printer) {
-  const OneofDescriptor* oneof = field->containing_oneof();
-
-  // Generate getter.
-  if (oneof != NULL) {
-    printer->Print(
-        "public function get@camel_name@()\n"
-        "{\n"
-        "    return $this->readOneof(@number@);\n"
-        "}\n\n",
-        "camel_name", UnderscoresToCamelCase(field->name(), true),
-        "number", IntToString(field->number()));
-  } else {
-    printer->Print(
-        "public function get@camel_name@()\n"
-        "{\n"
-        "    return $this->@name@;\n"
-        "}\n\n",
-        "camel_name", UnderscoresToCamelCase(field->name(), true), "name",
-        field->name());
-  }
-
-  // Generate setter.
-  printer->Print(
-      "public function set@camel_name@(@var@)\n"
-      "{\n",
-      "camel_name", UnderscoresToCamelCase(field->name(), true),
-      "var", (field->is_repeated() ||
-              field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE) ?
-             "&$var": "$var");
-
-  Indent(printer);
-
-  // Type check.
-  if (field->is_map()) {
-  } else if (field->is_repeated()) {
-    printer->Print(
-        "GPBUtil::checkRepeatedField($var, GPBType::@type@",
-        "type", ToUpper(field->type_name()));
-    if (field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE) {
-      printer->Print(
-          ", \\@class_name@);\n",
-          "class_name",
-          MessageName(field->message_type(), is_descriptor) + "::class");
-    } else if (field->cpp_type() == FieldDescriptor::CPPTYPE_ENUM) {
-      printer->Print(
-          ", @class_name@);\n",
-          "class_name",
-          EnumName(field->enum_type(), is_descriptor) + "::class");
-    } else {
-      printer->Print(");\n");
-    }
-  } else if (field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE) {
-    printer->Print(
-        "GPBUtil::checkMessage($var, \\@class_name@::class);\n",
-        "class_name", MessageName(field->message_type(), is_descriptor));
-  } else if (field->cpp_type() == FieldDescriptor::CPPTYPE_ENUM) {
-    printer->Print(
-        "GPBUtil::checkEnum($var, \\@class_name@::class);\n",
-        "class_name", EnumName(field->enum_type(), is_descriptor));
-  } else if (field->cpp_type() == FieldDescriptor::CPPTYPE_STRING) {
-    printer->Print(
-        "GPBUtil::checkString($var, @utf8@);\n",
-        "utf8",
-        field->type() == FieldDescriptor::TYPE_STRING ? "True": "False");
-  } else {
-    printer->Print(
-        "GPBUtil::check@type@($var);\n",
-        "type", UnderscoresToCamelCase(field->cpp_type_name(), true));
-  }
-
-  if (oneof != NULL) {
-    printer->Print(
-        "$this->writeOneof(@number@, $var);\n",
-        "number", IntToString(field->number()));
-  } else {
-    printer->Print(
-        "$this->@name@ = $var;\n",
-        "name", field->name());
-  }
-
-  // Set has bit for proto2 only.
-  if (is_descriptor) {
-    printer->Print(
-        "$this->has_@field_name@ = true;\n",
-        "field_name", field->name());
-  }
-
-  Outdent(printer);
-
-  printer->Print(
-      "}\n\n");
-
-  // Generate has method for proto2 only.
-  if (is_descriptor) {
-    printer->Print(
-        "public function has@camel_name@()\n"
-        "{\n"
-        "    return $this->has_@field_name@;\n"
-        "}\n\n",
-        "camel_name", UnderscoresToCamelCase(field->name(), true),
-        "field_name", field->name());
-  }
-}
-
-void GenerateRepeatedFieldDecode(
-    const google::protobuf::FieldDescriptor* field,
-    google::protobuf::io::Printer* printer) {
-  printer->Print(
-      "if ($input->read@cap_wire_type@($var)) return False;\n"
-      "$this->get@cap_field_name@() []= $var;\n",
-      "cap_field_name", UnderscoresToCamelCase(field->name(), true),
-      "cap_wire_type", UnderscoresToCamelCase(field->type_name(), true));
-}
-
-void GeneratePrimitiveFieldDecode(
-    const google::protobuf::FieldDescriptor* field,
-    google::protobuf::io::Printer* printer) {
-  printer->Print(
-      "if ($input->read@cap_wire_type@($var)) return False;\n"
-      "$this->set@cap_field_name@($var);\n",
-      "cap_field_name", UnderscoresToCamelCase(field->name(), true),
-      "cap_wire_type", UnderscoresToCamelCase(field->type_name(), true));
-}
-
-void GenerateFieldDecode(const google::protobuf::FieldDescriptor* field,
-                         google::protobuf::io::Printer* printer) {
-  printer->Print(
-      "case @number@:\n",
-      "number", IntToString(field->number()));
-  Indent(printer);
-
-  if (field->is_repeated()) {
-    GenerateRepeatedFieldDecode(field, printer);
-  } else {
-    GeneratePrimitiveFieldDecode(field, printer);
-  }
-
-  printer->Print(
-      "break;\n");
-  Outdent(printer);
-}
-
-void GenerateMessage(const string& name_prefix,
-                     const google::protobuf::Descriptor* message,
-                     bool is_descriptor,
-                     google::protobuf::io::Printer* printer) {
-  // Don't generate MapEntry messages -- we use the PHP extension's native
-  // support for map fields instead.
-  if (message->options().map_entry()) {
-    return;
-  }
-
-  string message_name = name_prefix.empty()?
-      message->name() : name_prefix + "_" + message->name();
-
-  printer->Print(
-      "class @name@ extends \\Google\\Protobuf\\Internal\\Message\n"
-      "{\n",
-      "name", message_name);
-  Indent(printer);
-
-  // Field and oneof definitions.
-  for (int i = 0; i < message->field_count(); i++) {
-    const FieldDescriptor* field = message->field(i);
-    GenerateField(field, printer, is_descriptor);
-  }
-  for (int i = 0; i < message->oneof_decl_count(); i++) {
-    const OneofDescriptor* oneof = message->oneof_decl(i);
-    GenerateOneofField(oneof, printer);
-  }
-  printer->Print("\n");
-
-  // Field and oneof accessors.
-  for (int i = 0; i < message->field_count(); i++) {
-    const FieldDescriptor* field = message->field(i);
-    GenerateFieldAccessor(field, is_descriptor, printer);
-  }
-  for (int i = 0; i < message->oneof_decl_count(); i++) {
-    const google::protobuf::OneofDescriptor* oneof = message->oneof_decl(i);
-    printer->Print(
-      "public function get@camel_name@()\n"
-      "{\n"
-      "    return $this->@name@;\n"
-      "}\n\n",
-      "camel_name", UnderscoresToCamelCase(oneof->name(), true), "name",
-      oneof->name());
-  }
-
-  Outdent(printer);
-  printer->Print("}\n\n");
-
-  // Nested messages and enums.
-  for (int i = 0; i < message->nested_type_count(); i++) {
-    GenerateMessage(message_name, message->nested_type(i), is_descriptor,
-                    printer);
-  }
-  for (int i = 0; i < message->enum_type_count(); i++) {
-    GenerateEnum(message->enum_type(i), printer);
-  }
-}
-
-void GenerateEnumToPool(const google::protobuf::EnumDescriptor* en,
-                        bool is_descriptor,
-                        google::protobuf::io::Printer* printer) {
-  printer->Print(
-      "$pool->addEnum('@name@', @class_name@::class)\n",
-      "name", EnumFullName(en, is_descriptor),
-      "class_name", en->name());
-  Indent(printer);
-
-  for (int i = 0; i < en->value_count(); i++) {
-    const EnumValueDescriptor* value = en->value(i);
-    printer->Print(
-        "->value(\"@name@\", @number@)\n",
-        "name", value->name(),
-        "number", IntToString(value->number()));
-  }
-  printer->Print("->finalizeToPool();\n\n");
-  Outdent(printer);
-}
-
-void GenerateMessageToPool(const string& name_prefix,
-                           const google::protobuf::Descriptor* message,
-                           bool is_descriptor,
-                           google::protobuf::io::Printer* printer) {
-  // Don't generate MapEntry messages -- we use the PHP extension's native
-  // support for map fields instead.
-  if (message->options().map_entry()) {
-    return;
-  }
-  string class_name = name_prefix.empty()?
-      message->name() : name_prefix + "_" + message->name();
-
-  printer->Print(
-      "$pool->addMessage('@message@', @class_name@::class)\n",
-      "message", MessageFullName(message, is_descriptor),
-      "class_name", class_name);
-
-  Indent(printer);
-
-  for (int i = 0; i < message->field_count(); i++) {
-    const FieldDescriptor* field = message->field(i);
-    if (field->is_map()) {
-      const FieldDescriptor* key =
-          field->message_type()->FindFieldByName("key");
-      const FieldDescriptor* val =
-          field->message_type()->FindFieldByName("value");
-      printer->Print(
-          "->map('@field@', GPBType::@key@, "
-          "GPBType::@value@, @number@@other@)\n",
-          "field", field->name(),
-          "key", ToUpper(key->type_name()),
-          "value", ToUpper(val->type_name()),
-          "number", SimpleItoa(field->number()),
-          "other", EnumOrMessageSuffix(val, is_descriptor));
-    } else if (!field->containing_oneof()) {
-      printer->Print(
-          "->@label@('@field@', GPBType::@type@, @number@@other@)\n",
-          "field", field->name(),
-          "label", LabelForField(field),
-          "type", ToUpper(field->type_name()),
-          "number", SimpleItoa(field->number()),
-          "other", EnumOrMessageSuffix(field, is_descriptor));
-    }
-  }
-
-  // oneofs.
-  for (int i = 0; i < message->oneof_decl_count(); i++) {
-    const OneofDescriptor* oneof = message->oneof_decl(i);
-    printer->Print("->oneof(@name@)\n",
-                   "name", oneof->name());
-    Indent(printer);
-    for (int index = 0; index < oneof->field_count(); index++) {
-      const FieldDescriptor* field = oneof->field(index);
-      printer->Print(
-          "->value('@field@', GPBType::@type@, @number@@other@)\n",
-          "field", field->name(),
-          "type", ToUpper(field->type_name()),
-          "number", SimpleItoa(field->number()),
-          "other", EnumOrMessageSuffix(field, is_descriptor));
-    }
-    printer->Print("->finish()\n");
-    Outdent(printer);
-  }
-
-  printer->Print(
-      "->finalizeToPool();\n");
-
-  Outdent(printer);
-
-  printer->Print(
-      "\n");
-
-  for (int i = 0; i < message->nested_type_count(); i++) {
-    GenerateMessageToPool(class_name, message->nested_type(i), is_descriptor,
-                          printer);
-  }
-  for (int i = 0; i < message->enum_type_count(); i++) {
-    GenerateEnumToPool(message->enum_type(i), is_descriptor, printer);
-  }
-}
-
-void GenerateAddFileToPool(const google::protobuf::FileDescriptor* file,
-                           bool is_descriptor,
-                           google::protobuf::io::Printer* printer) {
-  if (is_descriptor) {
-    printer->Print("$pool = DescriptorPool::getGeneratedPool();\n\n");
-
-    for (int i = 0; i < file->message_type_count(); i++) {
-      GenerateMessageToPool("", file->message_type(i), is_descriptor, printer);
-    }
-    for (int i = 0; i < file->enum_type_count(); i++) {
-      GenerateEnumToPool(file->enum_type(i), is_descriptor, printer);
-    }
-
-    printer->Print(
-        "$pool->finish();\n");
-  } else {
-    // Add messages and enums to descriptor pool.
-    printer->Print("$pool = DescriptorPool::getGeneratedPool();\n\n");
-
-    FileDescriptorSet files;
-    FileDescriptorProto* file_proto = files.add_file();
-    file->CopyTo(file_proto);
-    string files_data;
-    files.SerializeToString(&files_data);
-
-    printer->Print("$pool->internalAddGeneratedFile(hex2bin(\n");
-    Indent(printer);
-
-    // Only write 30 bytes per line.
-    static const int kBytesPerLine = 30;
-    for (int i = 0; i < files_data.size(); i += kBytesPerLine) {
-      printer->Print(
-          "\"@data@\"@dot@\n",
-          "data", BinaryToHex(files_data.substr(i, kBytesPerLine)),
-          "dot", i + kBytesPerLine < files_data.size() ? " ." : "");
-    }
-
-    Outdent(printer);
-    printer->Print(
-        "));\n\n");
-  }
-
-}
-
-void GenerateEnum(const google::protobuf::EnumDescriptor* en,
-                  google::protobuf::io::Printer* printer) {
-  printer->Print(
-      "class @name@\n"
-      "{\n",
-      "name", EnumClassName(en));
-  Indent(printer);
-
-  for (int i = 0; i < en->value_count(); i++) {
-    const EnumValueDescriptor* value = en->value(i);
-    printer->Print("const @name@ = @number@;\n",
-                   "name", value->name(),
-                   "number", IntToString(value->number()));
-  }
-  Outdent(printer);
-  printer->Print("}\n\n");
-}
-
-void GenerateUseDeclaration(bool is_descriptor,
-                            google::protobuf::io::Printer* printer) {
-  if (!is_descriptor) {
-    printer->Print(
-        "use Google\\Protobuf\\Internal\\DescriptorPool;\n"
-        "use Google\\Protobuf\\Internal\\GPBType;\n"
-        "use Google\\Protobuf\\Internal\\RepeatedField;\n"
-        "use Google\\Protobuf\\Internal\\GPBUtil;\n\n");
-  } else {
-    printer->Print(
-        "use Google\\Protobuf\\Internal\\DescriptorPool;\n"
-        "use Google\\Protobuf\\Internal\\GPBType;\n"
-        "use Google\\Protobuf\\Internal\\GPBWire;\n"
-        "use Google\\Protobuf\\Internal\\RepeatedField;\n"
-        "use Google\\Protobuf\\Internal\\InputStream;\n\n"
-        "use Google\\Protobuf\\Internal\\GPBUtil;\n\n");
-  }
-}
-
-void GenerateFile(const google::protobuf::FileDescriptor* file,
-                  bool is_descriptor, google::protobuf::io::Printer* printer) {
-  printer->Print(
-    "<?php\n"
-    "# Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
-    "# source: @filename@\n"
-    "\n",
-    "filename", file->name());
-  if (!file->package().empty()) {
-    printer->Print("namespace @name@;\n\n",
-                   "name", PhpName(file->package(), is_descriptor));
-  }
-
-  for (int i = 0; i < file->dependency_count(); i++) {
-    const std::string& name = file->dependency(i)->name();
-    printer->Print("require_once('@name@');\n", "name",
-                   GeneratedFileName(name, is_descriptor));
-  }
-
-  GenerateUseDeclaration(is_descriptor, printer);
-
-  for (int i = 0; i < file->message_type_count(); i++) {
-    GenerateMessage("", file->message_type(i), is_descriptor, printer);
-  }
-  for (int i = 0; i < file->enum_type_count(); i++) {
-    GenerateEnum(file->enum_type(i), printer);
-  }
-
-  GenerateAddFileToPool(file, is_descriptor, printer);
-}
-
-bool Generator::Generate(
-    const FileDescriptor* file,
-    const string& parameter,
-    GeneratorContext* generator_context,
-    string* error) const {
-  bool is_descriptor = parameter == "internal";
-
-  if (is_descriptor && file->name() != kDescriptorFile) {
-    *error =
-        "Can only generate PHP code for google/protobuf/descriptor.proto.\n";
-    return false;
-  }
-
-  if (!is_descriptor && file->syntax() != FileDescriptor::SYNTAX_PROTO3) {
-    *error =
-        "Can only generate PHP code for proto3 .proto files.\n"
-        "Please add 'syntax = \"proto3\";' to the top of your .proto file.\n";
-    return false;
-  }
-
-  std::string filename = GeneratedFileName(file->name(), is_descriptor);
-  scoped_ptr<io::ZeroCopyOutputStream> output(
-      generator_context->Open(filename));
-  io::Printer printer(output.get(), '@');
-
-  GenerateFile(file, is_descriptor, &printer);
-
-  return true;
-}
-
-}  // namespace php
-}  // namespace compiler
-}  // namespace protobuf
-}  // namespace google
diff --git a/src/google/protobuf/compiler/php/php_generator.h b/src/google/protobuf/compiler/php/php_generator.h
deleted file mode 100644
index ce2b000..0000000
--- a/src/google/protobuf/compiler/php/php_generator.h
+++ /dev/null
@@ -1,57 +0,0 @@
-// Protocol Buffers - Google's data interchange format
-// Copyright 2008 Google Inc.  All rights reserved.
-// https://developers.google.com/protocol-buffers/
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are
-// met:
-//
-//     * Redistributions of source code must retain the above copyright
-// notice, this list of conditions and the following disclaimer.
-//     * Redistributions in binary form must reproduce the above
-// copyright notice, this list of conditions and the following disclaimer
-// in the documentation and/or other materials provided with the
-// distribution.
-//     * Neither the name of Google Inc. nor the names of its
-// contributors may be used to endorse or promote products derived from
-// this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-#ifndef GOOGLE_PROTOBUF_COMPILER_PHP_GENERATOR_H__
-#define GOOGLE_PROTOBUF_COMPILER_PHP_GENERATOR_H__
-
-#include <google/protobuf/compiler/code_generator.h>
-
-#include <string>
-
-namespace google {
-namespace protobuf {
-namespace compiler {
-namespace php {
-
-class LIBPROTOC_EXPORT Generator
-    : public google::protobuf::compiler::CodeGenerator {
-  virtual bool Generate(
-      const FileDescriptor* file,
-      const string& parameter,
-      GeneratorContext* generator_context,
-      string* error) const;
-};
-
-}  // namespace php
-}  // namespace compiler
-}  // namespace protobuf
-}  // namespace google
-
-#endif  // GOOGLE_PROTOBUF_COMPILER_PHP_GENERATOR_H__
-- 
2.29.2

